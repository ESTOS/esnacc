// [PrintTSConverterCode]
// [PrintTSConverterComments]
/*
 * ENetUC_Event_Manager_Converter.ts
 * "UC-Server-Access-Protocol-Event-Manager" ASN.1 stubs.
 * This file was generated by estos esnacc (V5.0.1, 16.03.2023)
 * based on Coral WinSnacc written by Deepak Gupta
 * NOTE: This is a machine generated file - editing not recommended
 */

// prettier-ignore
/* eslint-disable curly, max-len, max-lines, no-unused-vars, jsdoc/require-jsdoc, @typescript-eslint/naming-convention, @typescript-eslint/no-use-before-define, @typescript-eslint/no-unused-vars */

// [PrintTSConverterImports]
import { DecodeContext, ConverterError, ConverterErrorType, ConverterErrors, EncodeContext, TSConverter, INamedType } from "./TSConverterBase";
import * as ENetUC_Event_Manager from "./ENetUC_Event_Manager";
// [printTSImports]
import * as asn1ts from "@estos/asn1ts";
import * as ENetUC_Common from "./ENetUC_Common";
import * as ENetUC_Common_Converter from "./ENetUC_Common_Converter";

// [PrintTSEncoderDecoderCode]
export class AsnCreateFancyEventsArgument_Converter {
	public static toJSON(s: ENetUC_Event_Manager.AsnCreateFancyEventsArgument, t: ENetUC_Event_Manager.AsnCreateFancyEventsArgument & INamedType, errors?: ConverterErrors, context?: EncodeContext, parametername?: string): boolean {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsArgument");

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnCreateFancyEventsArgument";
		TSConverter.fillJSONParam(s, t, "iEventDelay", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iEventCount", "number", errors, newContext);
		if (s.optionalParams) {
			const _optionalParams = new ENetUC_Common.AsnOptionalParameters();
			if (ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, _optionalParams, errors, newContext, "optionalParams"))
				t.optionalParams = _optionalParams;
		}

		return errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsArgument");
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnCreateFancyEventsArgument | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsArgument");

		let t: ENetUC_Event_Manager.AsnCreateFancyEventsArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Event_Manager.AsnCreateFancyEventsArgument>(data, errors, newContext, optional);
		if (s !== undefined) {
			t = ENetUC_Event_Manager.AsnCreateFancyEventsArgument.initEmpty();
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iEventDelay", "number", errors, context, false);
			TSConverter.fillJSONParam(s, t, "iEventCount", "number", errors, context, false);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
		}
		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Event_Manager.AsnCreateFancyEventsArgument | undefined, errors?: ConverterErrors, context?: EncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnCreateFancyEventsArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, name, "AsnCreateFancyEventsArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iEventDelay", "number", errors, newContext);
		TSConverter.validateParam(s, "iEventCount", "number", errors, newContext);
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsArgument")) {
			t.push(new asn1ts.Integer({ value: s.iEventDelay, name: "iEventDelay" }));
			t.push(new asn1ts.Integer({ value: s.iEventCount, name: "iEventCount" }));
			if (_optionalParams)
				t.push(_optionalParams);
			return result;
		}
		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnCreateFancyEventsArgument | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsArgument");

		let t: ENetUC_Event_Manager.AsnCreateFancyEventsArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Event_Manager.AsnCreateFancyEventsArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Event_Manager.AsnCreateFancyEventsArgument.initEmpty();
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iEventDelay", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iEventCount", "Integer", errors, newContext);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsArgument"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnCreateFancyEventsResult_Converter {
	public static toJSON(s: ENetUC_Event_Manager.AsnCreateFancyEventsResult, t: ENetUC_Event_Manager.AsnCreateFancyEventsResult & INamedType, errors?: ConverterErrors, context?: EncodeContext, parametername?: string): boolean {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsResult");

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnCreateFancyEventsResult";
		if (s.optionalParams) {
			const _optionalParams = new ENetUC_Common.AsnOptionalParameters();
			if (ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, _optionalParams, errors, newContext, "optionalParams"))
				t.optionalParams = _optionalParams;
		}

		return errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsResult");
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnCreateFancyEventsResult | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsResult");

		let t: ENetUC_Event_Manager.AsnCreateFancyEventsResult | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Event_Manager.AsnCreateFancyEventsResult>(data, errors, newContext, optional);
		if (s !== undefined) {
			t = ENetUC_Event_Manager.AsnCreateFancyEventsResult.initEmpty();
			// [Print_JSON_DecoderSeqDefCode]
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
		}
		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsResult"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Event_Manager.AsnCreateFancyEventsResult | undefined, errors?: ConverterErrors, context?: EncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnCreateFancyEventsResult";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, name, "AsnCreateFancyEventsResult");

		// [Print_BER_EncoderSeqDefCode]
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsResult")) {
			if (_optionalParams)
				t.push(_optionalParams);
			return result;
		}
		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnCreateFancyEventsResult | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnCreateFancyEventsResult");

		let t: ENetUC_Event_Manager.AsnCreateFancyEventsResult | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Event_Manager.AsnCreateFancyEventsResult.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Event_Manager.AsnCreateFancyEventsResult.initEmpty();
			// [Print_BER_DecoderSeqDefCode]
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(errorCount, newContext, "AsnCreateFancyEventsResult"))
			return t;

		return undefined;
	}
}

// [PrintTSEncoderDecoderCode]
export class AsnFancyEventArgument_Converter {
	public static toJSON(s: ENetUC_Event_Manager.AsnFancyEventArgument, t: ENetUC_Event_Manager.AsnFancyEventArgument & INamedType, errors?: ConverterErrors, context?: EncodeContext, parametername?: string): boolean {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnFancyEventArgument");

		// [Print_JSON_EncoderSeqDefCode]
		if (newContext.bAddTypes)
			t._type = "AsnFancyEventArgument";
		TSConverter.fillJSONParam(s, t, "iEventCounter", "number", errors, newContext);
		TSConverter.fillJSONParam(s, t, "iEventsLeft", "number", errors, newContext);
		if (s.optionalParams) {
			const _optionalParams = new ENetUC_Common.AsnOptionalParameters();
			if (ENetUC_Common_Converter.AsnOptionalParameters_Converter.toJSON(s.optionalParams, _optionalParams, errors, newContext, "optionalParams"))
				t.optionalParams = _optionalParams;
		}

		return errors.validateResult(errorCount, newContext, "AsnFancyEventArgument");
	}

	public static fromJSON(data: string | object | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnFancyEventArgument | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnFancyEventArgument");

		let t: ENetUC_Event_Manager.AsnFancyEventArgument | undefined;
		const s = TSConverter.prepareJSONData<ENetUC_Event_Manager.AsnFancyEventArgument>(data, errors, newContext, optional);
		if (s !== undefined) {
			t = ENetUC_Event_Manager.AsnFancyEventArgument.initEmpty();
			// [Print_JSON_DecoderSeqDefCode]
			TSConverter.fillJSONParam(s, t, "iEventCounter", "number", errors, context, false);
			TSConverter.fillJSONParam(s, t, "iEventsLeft", "number", errors, context, false);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromJSON(s.optionalParams, errors, newContext, "optionalParams", true);
		}
		if (errors.validateResult(errorCount, newContext, "AsnFancyEventArgument"))
			return t;

		return undefined;
	}

	public static toBER(s: ENetUC_Event_Manager.AsnFancyEventArgument | undefined, errors?: ConverterErrors, context?: EncodeContext, name?: string, optional?: boolean | number): asn1ts.Sequence | undefined {
		name ||= "AsnFancyEventArgument";
		if (!s) {
			TSConverter.addMissingError(errors, context, name, optional);
			return undefined;
		}

		const result = new asn1ts.Sequence(TSConverter.getASN1TSConstructorParams(name, optional));
		const t = result.valueBlock.value;
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, name, "AsnFancyEventArgument");

		// [Print_BER_EncoderSeqDefCode]
		TSConverter.validateParam(s, "iEventCounter", "number", errors, newContext);
		TSConverter.validateParam(s, "iEventsLeft", "number", errors, newContext);
		const _optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.toBER(s.optionalParams, errors, newContext, "optionalParams", true);
		if (errors.validateResult(errorCount, newContext, "AsnFancyEventArgument")) {
			t.push(new asn1ts.Integer({ value: s.iEventCounter, name: "iEventCounter" }));
			t.push(new asn1ts.Integer({ value: s.iEventsLeft, name: "iEventsLeft" }));
			if (_optionalParams)
				t.push(_optionalParams);
			return result;
		}
		return undefined;
	}

	public static fromBER(data: Uint8Array | asn1ts.BaseBlock | undefined, errors?: ConverterErrors, context?: DecodeContext, parametername?: string, optional?: boolean): ENetUC_Event_Manager.AsnFancyEventArgument | undefined {
		errors ||= new ConverterErrors();
		const errorCount = errors.length;
		const newContext = TSConverter.addContext(context, parametername, "AsnFancyEventArgument");

		let t: ENetUC_Event_Manager.AsnFancyEventArgument | undefined;
		const s = TSConverter.prepareASN1BERData(ENetUC_Event_Manager.AsnFancyEventArgument.getASN1Schema, data, errors, newContext, optional);
		if (asn1ts.Sequence.typeGuard(s)) {
			t = ENetUC_Event_Manager.AsnFancyEventArgument.initEmpty();
			// [Print_BER_DecoderSeqDefCode]
			TSConverter.fillASN1Param(s, t, "iEventCounter", "Integer", errors, newContext);
			TSConverter.fillASN1Param(s, t, "iEventsLeft", "Integer", errors, newContext);
			t.optionalParams = ENetUC_Common_Converter.AsnOptionalParameters_Converter.fromBER(s.getTypedValueByName(asn1ts.Sequence, "optionalParams"), errors, newContext, "optionalParams", true);
		}

		if (errors.validateResult(errorCount, newContext, "AsnFancyEventArgument"))
			return t;

		return undefined;
	}
}
